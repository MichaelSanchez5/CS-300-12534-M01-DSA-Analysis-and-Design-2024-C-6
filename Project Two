// ====================
// Michael Sanchez
// ---------------------
//12-14-2024
// CS-300: Project Two
//======================

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>

struct Course {
    std::string courseNumber;
    std::string courseTitle;
    std::vector<std::string> prerequisites;
};

// Function to load data from a file into a data structure
bool loadDataStructure(const std::string& filename, std::map<std::string, Course>& courseData) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cout << "Failed to open the file." << std::endl;
        return false;
    }

    std::string line;
    while (std::getline(file, line)) {
        std::string courseNumber, courseTitle, prerequisite;
        std::vector<std::string> prerequisites;

        // Split the line into courseNumber, courseTitle, and prerequisites
        // You may need to customize this based on the actual format of your input file
        // For example, you may use comma-separated values.
        // Here, we assume that courseNumber and courseTitle are separated by a space, and prerequisites are separated by commas.
        size_t pos = line.find(' ');
        if (pos != std::string::npos) {
            courseNumber = line.substr(0, pos);
            courseTitle = line.substr(pos + 1);

            size_t prerequisitesStart = line.find("Prerequisites: ");
            if (prerequisitesStart != std::string::npos) {
                prerequisite = line.substr(prerequisitesStart + 14);
                size_t commaPos = 0;
                while ((commaPos = prerequisite.find(',')) != std::string::npos) {
                    prerequisites.push_back(prerequisite.substr(0, commaPos));
                    prerequisite.erase(0, commaPos + 2);
                }
                prerequisites.push_back(prerequisite);
            }

            Course course;
            course.courseNumber = courseNumber;
            course.courseTitle = courseTitle;
            course.prerequisites = prerequisites;
            courseData[courseNumber] = course;
        }
    }

    file.close();
    return true;
}

// Function to print a sorted list of courses
void printCourseList(const std::map<std::string, Course>& courseData) {
    for (const auto& entry : courseData) {
        std::cout << entry.second.courseNumber << ", " << entry.second.courseTitle << std::endl;
    }
}

// Function to print course information
void printCourseInfo(const std::map<std::string, Course>& courseData, const std::string& courseNumber) {
    auto it = courseData.find(courseNumber);
    if (it != courseData.end()) {
        const Course& course = it->second;
        std::cout << course.courseNumber << ", " << course.courseTitle << std::endl;
        if (!course.prerequisites.empty()) {
            std::cout << "Prerequisites: ";
            for (const std::string& prereq : course.prerequisites) {
                std::cout << prereq << ", ";
            }
            std::cout << std::endl;
        }
    } else {
        std::cout << "Course not found." << std::endl;
    }
}

int main() {
    std::map<std::string, Course> courseData;

    std::cout << "Welcome to the course planner." << std::endl;
    int choice;

    while (true) {
        std::cout << "1. Load Data Structure." << std::endl;
        std::cout << "2. Print Course List." << std::endl;
        std::cout << "3. Print Course." << std::endl;
        std::cout << "9. Exit" << std::endl;
        std::cout << "What would you like to do? ";
        std::cin >> choice;

        switch (choice) {
            case 1: {
                std::string filename;
                std::cout << "Enter the filename for course data: ";
                std::cin >> filename;
                if (loadDataStructure(filename, courseData)) {
                    std::cout << "Data loaded successfully." << std::endl;
                }
                break;
            }
            case 2:
                printCourseList(courseData);
                break;
            case 3: {
                std::string courseNumber;
                std::cout << "What course do you want to know about? ";
                std::cin >> courseNumber;
                printCourseInfo(courseData, courseNumber);
                break;
            }
            case 4:
                std::cout << "Goodbye!" << std::endl;
                return 0;
            default:
                std::cout << choice << " is not a valid option." << std::endl;
                break;
        }
    }

    return 0;
}

///--------------------------------
/// Print Courses In Order: private
///--------------------------------
void BST::inOrder(Node* node) {

    if (node != nullptr) {
        //recurse down left side
        inOrder(node->left);
        //print course information at current node
        cout << "Course Number: " << node->course.courseNum;
        cout << " Course Name: " << node->course.courseName;
        cout << " Prerequisite(s): ";
        //iterate through course's prereq vector to print
        for (int i = 0; i < node->course.PreReqs.size(); ++i) {
            cout << node->course.PreReqs[i] << " ";
        }
        if (node->course.PreReqs.size() == 0) {
            cout << "None";
        }
        cout << "\n";

        //recurse down right side
        inOrder(node->right);
    }
    return;
}

///---------------------------------
/// Print Individual Course: private
///---------------------------------
void BST::printCourse(Node* node, string courseNum) {

    while (node != nullptr) {
        //if match is found
        if (node->course.courseNum.compare(courseNum) == 0) {
            cout << "Course Number: " << node->course.courseNum;
            cout << "  Course Name: " << node->course.courseName;
            cout << "  Prerequisite(s): ";
            //iterate through prereq vector to print
            for (int i = 0; i < node->course.PreReqs.size(); ++i) {
                cout << node->course.PreReqs[i] << " ";
            }
            //if there are no prereqs
            if (node->course.PreReqs.size() == 0) {
                cout << "None";
            }
            cout << "\n";
            return;
        }
        //if current course number is smaller than the one passed in
        else if (node->course.courseNum.compare(courseNum) > 0 && node->left != nullptr) {
            node = node->left;
        }
        //if current course number is larger than the one passed in
        else if (node->course.courseNum.compare(courseNum) < 0 && node->right != nullptr) {
            node = node->right;
        }
        else {
            cout << "Course not found. Are you sure you entered the right course number? \n";
            return;
        }
    }
    //error if tree is not loaded
    if (root == nullptr) {
        cout << "Error loading data. =[ \n";
        return;
    }
}


///------------------------------------------------------
///Load Data (from file into bst)
///------------------------------------------------------
bool BST::loadData() {

    //use ifstream to open file
    ifstream file;
    file.open("ProjectCourseFile.txt");
    
    if (file.is_open()) {
        //while end of file is not reached
        while (!file.eof()) {
            //create a vector to hold line items
            vector<string> courseLine;
            //to parse line into vector
            string line;

            //get line from file and assign to 'line'
            getline(file, line);
            //while line is not empty
            while (line.length() > 0) {
                unsigned int delim = line.find(',');
                //limits data size to 99 or less characters
                if (delim < 100) {
                    //add item to courseLine, then delete
                    courseLine.push_back(line.substr(0, delim));
                    line.erase(0, delim + 1);
                }
                //add item following last comma, then clear line
                else {
                    courseLine.push_back(line.substr(0, line.length()));
                    line = "";
                }
            }

            //local course object (to be filled and passed to insert)
            Course course;
            //assign course number and name

            course.courseNum = courseLine[0];
            course.courseName = courseLine[1];
            //push items 3+ into prereq vector
            for (unsigned int i = 2; i < courseLine.size(); i++) {
                course.PreReqs.push_back(courseLine[i]);
            } 
            //insert the course into bst
            insert(course);
        }
        return true;
    }
    if (!file) {
        cout << "Something went wrong and the file didn't open. Sad day! D: \n";
        return false;
    }
    file.close();
}

bool BST::validatePreReqs(Course course) {
    //create local node and set to root
    Node* current = root;
    if (current->course.PreReqs.size() > 0) {
        //iterate through prerequisite vector
        for (int i = 0; i < course.PreReqs.size(); i++) {
            while (current != nullptr) {
                //if match is found
                if (course.PreReqs[i] == current->course.courseNum) {
                    return true;
                }
                //if course number is smaller than prerequisite
                else if (course.PreReqs[i].compare(current->course.courseNum) > 0 && current->left != nullptr) {
                    current = current->left;
                }
                //if course number is larger than prerequisite
                else if (course.PreReqs[i].compare(current->course.courseNum) < 0 && current->right != nullptr) {
                    current = current->right;
                }
                //if corresponding course number is not found
                else {
                    cout << "Prerequisite not found. \n";
                    return false;
                }
            }
        }
    }
    else {
        //no prerequisites
        return true;
    }
}

int main()
{
    //create bst 
    BST* bst = new BST();
    //create a string variable to hold input (for case 3)
    string courseNum;
    //set choice to 0
    int choice = 0;

    cout << "Welcome to the course planner! \n\n";
    //Menu loop that will iterate until user enters 4
    while (choice != 4) {
        cout << "**_____________________________**\n";
        cout << "||            MENU             ||\n";
        cout << "||-----------------------------||\n";
        cout << "||[1] Load Data Structure      ||\n";
        cout << "||[2] Print Course List        ||\n";
        cout << "||[3] Print Course             ||\n";
        cout << "||[4] Exit                     ||\n";
        cout << "||_____________________________||\n";
        cout << "What would you like to do? ";
        cin >> choice;

        //menu selections
        switch (choice) {
        //load data from file
        case 1:
            bst->loadData();
            break;
        //print sorted course information
        case 2: 
            cout << "\nHere is a sample schedule: \n";
            cout << "---------------------------- \n";
            bst->InOrder();
            cout << "\n";
            break;
        //search for a specific course to display
        case 3:
            cout << "Please enter the course number you would like to search: ";
            cin >> courseNum;
            bst->PrintCourse(courseNum);
            cout << "\n";
            break;
        //say goodbye, the user is leaving now
        case 4:
            cout << "\nThank you for using the course planner!\n";
            break;
        //for invalid input
        default: 
            cout << choice << " is not a valid option. Please enter a number 1 - 4.\n";
        }
    }   
    return 0;
}
